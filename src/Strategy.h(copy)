/*
 * Copyright (C) 2016+ AzerothCore <www.azerothcore.org>, released under GNU GPL v2 license, you may redistribute it and/or modify it under version 2 of the License, or (at your option), any later version.
 */

#ifndef _PLAYERBOT_STRATEGYCONTEXT_H
#define _PLAYERBOT_STRATEGYCONTEXT_H

#include "CustomStrategy.h"
#include "NamedObjectContext.h"
#include "AttackEnemyPlayersStrategy.h"
#include "BattlegroundStrategy.h"
#include "CastTimeStrategy.h"
#include "ChatCommandHandlerStrategy.h"
#include "ConserveManaStrategy.h"
#include "DeadStrategy.h"
#include "DebugStrategy.h"
#include "DpsAssistStrategy.h"
#include "DuelStrategy.h"
#include "EmoteStrategy.h"
#include "FleeStrategy.h"
#include "FollowMasterStrategy.h"
#include "GrindingStrategy.h"
#include "GroupStrategy.h"
#include "GuardStrategy.h"
#include "GuildStrategy.h"
#include "KiteStrategy.h"
#include "LfgStrategy.h"
#include "LootNonCombatStrategy.h"
#include "MaintenanceStrategy.h"
#include "MarkRtiStrategy.h"
#include "MeleeCombatStrategy.h"
#include "NonCombatStrategy.h"
#include "QuestStrategies.h"
#include "PassiveStrategy.h"
#include "PullStrategy.h"
#include "RacialsStrategy.h"
#include "RangedCombatStrategy.h"
#include "ReturnStrategy.h"
#include "RpgStrategy.h"
#include "RTSCStrategy.h"
#include "RunawayStrategy.h"
#include "StayStrategy.h"
#include "TankAssistStrategy.h"
#include "TellTargetStrategy.h"
#include "ThreatStrategy.h"
#include "TravelStrategy.h"
#include "UseFoodStrategy.h"
#include "UsePotionsStrategy.h"
#include "WorldPacketHandlerStrategy.h"

// Class definition for StrategyContext, inheriting from NamedObjectContext<Strategy>
class StrategyContext : public NamedObjectContext<Strategy>
{
    public:
        // Constructor for StrategyContext
        StrategyContext()
        {
            // Initializing strategy creators
            creators["racials"] = &StrategyContext::racials; // Assigning racials strategy creator
            creators["loot"] = &StrategyContext::loot; // Assigning loot strategy creator
            creators["gather"] = &StrategyContext::gather; // Assigning gather strategy creator
            creators["emote"] = &StrategyContext::emote; // Assigning emote strategy creator
            creators["passive"] = &StrategyContext::passive; // Assigning passive strategy creator
            creators["auto save mana"] = &StrategyContext::auto_save_mana; // Assigning auto save mana strategy creator
            creators["food"] = &StrategyContext::food; // Assigning food strategy creator
            creators["chat"] = &StrategyContext::chat; // Assigning chat strategy creator
            creators["default"] = &StrategyContext::world_packet; // Assigning default strategy creator
            creators["ready check"] = &StrategyContext::ready_check; // Assigning ready check strategy creator
            creators["dead"] = &StrategyContext::dead; // Assigning dead strategy creator
            creators["flee"] = &StrategyContext::flee; // Assigning flee strategy creator
            creators["duel"] = &StrategyContext::duel; // Assigning duel strategy creator
            creators["start duel"] = &StrategyContext::start_duel; // Assigning start duel strategy creator
            creators["kite"] = &StrategyContext::kite; // Assigning kite strategy creator
            creators["potions"] = &StrategyContext::potions; // Assigning potions strategy creator
            creators["cast time"] = &StrategyContext::cast_time; // Assigning cast time strategy creator
            creators["threat"] = &StrategyContext::threat; // Assigning threat strategy creator
            creators["focus"] = &StrategyContext::focus; // Assigning focus strategy creator
            creators["tell target"] = &StrategyContext::tell_target; // Assigning tell target strategy creator
            creators["pvp"] = &StrategyContext::pvp; // Assigning pvp strategy creator
            creators["return"] = &StrategyContext::_return; // Assigning return strategy creator
            creators["lfg"] = &StrategyContext::lfg; // Assigning lfg strategy creator
            creators["custom"] = &StrategyContext::custom; // Assigning custom strategy creator
            creators["reveal"] = &StrategyContext::reveal; // Assigning reveal strategy creator
            creators["collision"] = &StrategyContext::collision; // Assigning collision strategy creator
            creators["rpg"] = &StrategyContext::rpg; // Assigning rpg strategy creator
            creators["travel"] = &StrategyContext::travel; // Assigning travel strategy creator
            creators["explore"] = &StrategyContext::explore; // Assigning explore strategy creator
            creators["map"] = &StrategyContext::map; // Assigning map strategy creator
            creators["map full"] = &StrategyContext::map_full; // Assigning map full strategy creator
            creators["sit"] = &StrategyContext::sit; // Assigning sit strategy creator
            creators["mark rti"] = &StrategyContext::mark_rti; // Assigning mark rti strategy creator
            creators["adds"] = &StrategyContext::possible_adds; // Assigning possible adds strategy creator
            creators["close"] = &StrategyContext::close; // Assigning close strategy creator
            creators["ranged"] = &StrategyContext::ranged; // Assigning ranged strategy creator
            creators["behind"] = &StrategyContext::behind; // Assigning behind strategy creator
            creators["bg"] = &StrategyContext::bg; // Assigning bg strategy creator
            creators["battleground"] = &StrategyContext::battleground; // Assigning battleground strategy creator
            creators["warsong"] = &StrategyContext::warsong; // Assigning warsong strategy creator
            creators["alterac"] = &StrategyContext::alterac; // Assigning alterac strategy creator
            creators["arathi"] = &StrategyContext::arathi; // Assigning arathi strategy creator
            creators["eye"] = &StrategyContext::eye; // Assigning eye strategy creator
            creators["isle"] = &StrategyContext::isle; // Assigning isle strategy creator
            creators["arena"] = &StrategyContext::arena; // Assigning arena strategy creator
            creators["mount"] = &StrategyContext::mount; // Assigning mount strategy creator
            creators["rtsc"] = &StrategyContext::rtsc; // Assigning rtsc strategy creator
            creators["attack tagged"] = &StrategyContext::attack_tagged; // Assigning attack tagged strategy creator
            creators["debug"] = &StrategyContext::debug; // Assigning debug strategy creator
            creators["debug move"] = &StrategyContext::debug_move; // Assigning debug move strategy creator
            creators["debug rpg"] = &StrategyContext::debug_rpg; // Assigning debug rpg strategy creator
            creators["debug spell"] = &StrategyContext::debug_spell; // Assigning debug spell strategy creator
            creators["maintenance"] = &StrategyContext::maintenance; // Assigning maintenance strategy creator
            creators["group"] = &StrategyContext::group; // Assigning group strategy creator
            creators["guild"] = &StrategyContext::guild; // Assigning guild strategy creator
            creators["grind"] = &StrategyContext::grind; // Assigning grind strategy creator
            creators["avoid aoe"] = &StrategyContext::avoid_aoe; // Assigning avoid aoe strategy creator
            creators["move random"] = &StrategyContext::move_random; // Assigning move random strategy creator
            creators["combat formation"] = &StrategyContext::combat_formation; // Assigning combat formation strategy creator
        }

    private:
        // Static methods to create specific strategies
        static Strategy* behind(PlayerbotAI* botAI) { return new SetBehindCombatStrategy(botAI); } // Creates SetBehindCombatStrategy
        static Strategy* ranged(PlayerbotAI* botAI) { return new RangedCombatStrategy(botAI); } // Creates RangedCombatStrategy
        static Strategy* close(PlayerbotAI* botAI) { return new MeleeCombatStrategy(botAI); } // Creates MeleeCombatStrategy
        static Strategy* mark_rti(PlayerbotAI* botAI) { return new MarkRtiStrategy(botAI); } // Creates MarkRtiStrategy
        static Strategy* tell_target(PlayerbotAI* botAI) { return new TellTargetStrategy(botAI); } // Creates TellTargetStrategy
        static Strategy* threat(PlayerbotAI* botAI) { return new ThreatStrategy(botAI); } // Creates ThreatStrategy
        static Strategy* focus(PlayerbotAI* botAI) { return new FocusStrategy(botAI); } // Creates FocusStrategy
        static Strategy* cast_time(PlayerbotAI* botAI) { return new CastTimeStrategy(botAI); } // Creates CastTimeStrategy
        static Strategy* potions(PlayerbotAI* botAI) { return new UsePotionsStrategy(botAI); } // Creates UsePotionsStrategy
        static Strategy* kite(PlayerbotAI* botAI) { return new KiteStrategy(botAI); } // Creates KiteStrategy
        static Strategy* duel(PlayerbotAI* botAI) { return new DuelStrategy(botAI); } // Creates DuelStrategy
        static Strategy* start_duel(PlayerbotAI* botAI) { return new StartDuelStrategy(botAI); } // Creates StartDuelStrategy
        static Strategy* flee(PlayerbotAI* botAI) { return new FleeStrategy(botAI); } // Creates FleeStrategy
        static Strategy* dead(PlayerbotAI* botAI) { return new DeadStrategy(botAI); } // Creates DeadStrategy
        static Strategy* racials(PlayerbotAI* botAI) { return new RacialsStrategy(botAI); } // Creates RacialsStrategy
        static Strategy* loot(PlayerbotAI* botAI) { return new LootNonCombatStrategy(botAI); } // Creates LootNonCombatStrategy
        static Strategy* gather(PlayerbotAI* botAI) { return new GatherStrategy(botAI); } // Creates GatherStrategy
        static Strategy* emote(PlayerbotAI* botAI) { return new EmoteStrategy(botAI); } // Creates EmoteStrategy
        static Strategy* passive(PlayerbotAI* botAI) { return new PassiveStrategy(botAI); } // Creates PassiveStrategy
        static Strategy* auto_save_mana(PlayerbotAI* botAI) { return new HealerAutoSaveManaStrategy(botAI); } // Creates HealerAutoSaveManaStrategy
        static Strategy* food(PlayerbotAI* botAI) { return new UseFoodStrategy(botAI); } // Creates UseFoodStrategy
        static Strategy* chat(PlayerbotAI* botAI) { return new ChatCommandHandlerStrategy(botAI); } // Creates ChatCommandHandlerStrategy
        static Strategy* world_packet(PlayerbotAI* botAI) { return new WorldPacketHandlerStrategy(botAI); } // Creates WorldPacketHandlerStrategy
        static Strategy* ready_check(PlayerbotAI* botAI) { return new ReadyCheckStrategy(botAI); } // Creates ReadyCheckStrategy
        static Strategy* pvp(PlayerbotAI* botAI) { return new AttackEnemyPlayersStrategy(botAI); } // Creates AttackEnemyPlayersStrategy
        static Strategy* _return(PlayerbotAI* botAI) { return new ReturnStrategy(botAI); } // Creates ReturnStrategy
        static Strategy* lfg(PlayerbotAI* botAI) { return new LfgStrategy(botAI); } // Creates LfgStrategy
        static Strategy* custom(PlayerbotAI* botAI) { return new CustomStrategy(botAI); } // Creates CustomStrategy
        static Strategy* reveal(PlayerbotAI* botAI) { return new RevealStrategy(botAI); } // Creates RevealStrategy
        static Strategy* collision(PlayerbotAI* botAI) { return new CollisionStrategy(botAI); } // Creates CollisionStrategy
        static Strategy* rpg(PlayerbotAI* botAI) { return new RpgStrategy(botAI); } // Creates RpgStrategy
        static Strategy* travel(PlayerbotAI* botAI) { return new TravelStrategy(botAI); } // Creates TravelStrategy
        static Strategy* explore(PlayerbotAI* botAI) { return new ExploreStrategy(botAI); } // Creates ExploreStrategy
        static Strategy* map(PlayerbotAI* botAI) { return new MapStrategy(botAI); } // Creates MapStrategy
        static Strategy* map_full(PlayerbotAI* botAI) { return new MapFullStrategy(botAI); } // Creates MapFullStrategy
        static Strategy* sit(PlayerbotAI* botAI) { return new SitStrategy(botAI); } // Creates SitStrategy
        static Strategy* possible_adds(PlayerbotAI* botAI) { return new PossibleAddsStrategy(botAI); } // Creates PossibleAddsStrategy
        static Strategy* mount(PlayerbotAI* botAI) { return new MountStrategy(botAI); } // Creates MountStrategy
        static Strategy* bg(PlayerbotAI* botAI) { return new BGStrategy(botAI); } // Creates BGStrategy
        static Strategy* battleground(PlayerbotAI* botAI) { return new BattlegroundStrategy(botAI); } // Creates BattlegroundStrategy
        static Strategy* warsong(PlayerbotAI* botAI) { return new WarsongStrategy(botAI); } // Creates WarsongStrategy
        static Strategy* alterac(PlayerbotAI* botAI) { return new AlteracStrategy(botAI); } // Creates AlteracStrategy
        static Strategy* arathi(PlayerbotAI* botAI) { return new ArathiStrategy(botAI); } // Creates ArathiStrategy
        static Strategy* eye(PlayerbotAI* botAI) { return new EyeStrategy(botAI); } // Creates EyeStrategy
        static Strategy* isle(PlayerbotAI* botAI) { return new IsleStrategy(botAI); } // Creates IsleStrategy
        static Strategy* arena(PlayerbotAI* botAI) { return new ArenaStrategy(botAI); } // Creates ArenaStrategy
        static Strategy* rtsc(PlayerbotAI* botAI) { return new RTSCStrategy(botAI); } // Creates RTSCStrategy
        static Strategy* attack_tagged(PlayerbotAI* botAI) { return new AttackTaggedStrategy(botAI); } // Creates AttackTaggedStrategy
        static Strategy* debug(PlayerbotAI* botAI) { return new DebugStrategy(botAI); } // Creates DebugStrategy
        static Strategy* debug_move(PlayerbotAI* botAI) { return new DebugMoveStrategy(botAI); } // Creates DebugMoveStrategy
        static Strategy* debug_rpg(PlayerbotAI* botAI) { return new DebugRpgStrategy(botAI); } // Creates DebugRpgStrategy
        static Strategy* debug_spell(PlayerbotAI* botAI) { return new DebugSpellStrategy(botAI); } // Creates DebugSpellStrategy
        static Strategy* maintenance(PlayerbotAI* botAI) { return new MaintenanceStrategy(botAI); } // Creates MaintenanceStrategy
        static Strategy* group(PlayerbotAI* botAI) { return new GroupStrategy(botAI); } // Creates GroupStrategy
        static Strategy* guild (PlayerbotAI* botAI) { return new GuildStrategy(botAI); } // Creates GuildStrategy
        static Strategy* grind(PlayerbotAI* botAI) { return new GrindingStrategy(botAI); } // Creates GrindingStrategy
        static Strategy* avoid_aoe(PlayerbotAI* botAI) { return new AvoidAoeStrategy(botAI); } // Creates AvoidAoeStrategy
        static Strategy* move_random(PlayerbotAI* ai) { return new MoveRandomStrategy(ai); } // Creates MoveRandomStrategy
        static Strategy* combat_formation(PlayerbotAI* ai) { return new CombatFormationStrategy(ai); } // Creates CombatFormationStrategy
};

// Class definition for MovementStrategyContext, inheriting from NamedObjectContext<Strategy>
class MovementStrategyContext : public NamedObjectContext<Strategy>
{
    public:
        // Constructor for MovementStrategyContext
        MovementStrategyContext() : NamedObjectContext<Strategy>(false, true)
        {
            // Initializing movement strategy creators
            creators["follow"] = &MovementStrategyContext::follow_master; // Assigning follow master strategy creator
            creators["stay"] = &MovementStrategyContext::stay; // Assigning stay strategy creator
            creators["runaway"] = &MovementStrategyContext::runaway; // Assigning runaway strategy creator
            creators["flee from adds"] = &MovementStrategyContext::flee_from_adds; // Assigning flee from adds strategy creator
            creators["guard"] = &MovementStrategyContext::guard; // Assigning guard strategy creator
        }

    private:
        // Static methods to create specific movement strategies
        static Strategy* guard(PlayerbotAI* botAI) { return new GuardStrategy(botAI); } // Creates GuardStrategy
        static Strategy* follow_master(PlayerbotAI* botAI) { return new FollowMasterStrategy(botAI); } // Creates FollowMasterStrategy
        static Strategy* stay(PlayerbotAI* botAI) { return new StayStrategy(botAI); } // Creates StayStrategy
        static Strategy* runaway(PlayerbotAI* botAI) { return new RunawayStrategy(botAI); } // Creates RunawayStrategy
        static Strategy* flee_from_adds(PlayerbotAI* botAI) { return new FleeFromAddsStrategy(botAI); } // Creates FleeFromAddsStrategy
};

// Class definition for AssistStrategyContext, inheriting from NamedObjectContext<Strategy>
class AssistStrategyContext : public NamedObjectContext<Strategy>
{
    public:
        // Constructor for AssistStrategyContext
        AssistStrategyContext() : NamedObjectContext<Strategy>(false, true)
        {
            // Initializing assist strategy creators
            creators["dps assist"] = &AssistStrategyContext::dps_assist; // Assigning dps assist strategy creator
            creators["dps aoe"] = &AssistStrategyContext::dps_aoe; // Assigning dps aoe strategy creator
            creators["tank assist"] = &AssistStrategyContext::tank_assist; // Assigning tank assist strategy creator
        }

    private:
        // Static methods to create specific assist strategies
        static Strategy* dps_assist(PlayerbotAI* botAI) { return new DpsAssistStrategy(botAI); } // Creates DpsAssistStrategy
        static Strategy* dps_aoe(PlayerbotAI* botAI) { return new DpsAoeStrategy(botAI); } // Creates DpsAoeStrategy
        static Strategy* tank_assist(PlayerbotAI* botAI) { return new TankAssistStrategy(botAI); } // Creates TankAssistStrategy
};

// Class definition for QuestStrategyContext, inheriting from NamedObjectContext<Strategy>
class QuestStrategyContext : public NamedObjectContext<Strategy>
{
    public:
        // Constructor for QuestStrategyContext
        QuestStrategyContext() : NamedObjectContext<Strategy>(false, true)
        {
            // Initializing quest strategy creators
            creators["quest"] = &QuestStrategyContext::quest; // Assigning quest strategy creator
            creators["accept all quests"] = &QuestStrategyContext::accept_all_quests; // Assigning accept all quests strategy creator
        }

    private:
        // Static methods to create specific quest strategies
        static Strategy* quest(PlayerbotAI* botAI) { return new DefaultQuestStrategy(botAI); } // Creates DefaultQuestStrategy
        static Strategy* accept_all_quests(PlayerbotAI* botAI) { return new AcceptAllQuestsStrategy(botAI); } // Creates AcceptAllQuestsStrategy
};

#endif
